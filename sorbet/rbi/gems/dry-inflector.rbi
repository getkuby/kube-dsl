# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-inflector/all/dry-inflector.rbi
#
# dry-inflector-0.2.1

module Dry
end
class Dry::Inflector
  def camelize(input); end
  def camelize_lower(input); end
  def camelize_upper(input); end
  def classify(input); end
  def constantize(input); end
  def dasherize(input); end
  def demodulize(input); end
  def foreign_key(input); end
  def humanize(input); end
  def inflections; end
  def initialize(&blk); end
  def inspect; end
  def internal_camelize(input, upper); end
  def ordinalize(number); end
  def pluralize(input); end
  def singularize(input); end
  def tableize(input); end
  def to_s; end
  def uncountable?(input); end
  def underscore(input); end
end
class Dry::Inflector::Rules
  def apply_to(word); end
  def each(&blk); end
  def initialize; end
  def insert(index, array); end
end
class Dry::Inflector::Acronyms
  def add(rule, replacement); end
  def apply_to(word, capitalize: nil); end
  def define_regex_patterns; end
  def initialize; end
  def regex; end
end
class Dry::Inflector::Inflections
  def acronym(*words); end
  def acronyms; end
  def add_irregular(rule, replacement, target); end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def rule(rule, replacement, target); end
  def self.build(&blk); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
end
module Dry::Inflector::Inflections::Defaults
  def self.acronyms(inflect); end
  def self.call(inflect); end
  def self.irregular(inflect); end
  def self.plural(inflect); end
  def self.singular(inflect); end
  def self.uncountable(inflect); end
end
