# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sorbet-runtime-stub/all/sorbet-runtime-stub.rbi
#
# sorbet-runtime-stub-0.2.0

module T
  def self.absurd(value); end
  def self.attached_class; end
end
module T::Sig
  def sig(arg0 = nil, &blk); end
end
module T::Helpers
  def abstract!; end
  def final!; end
  def interface!; end
  def mixes_in_class_methods(mod); end
  def sealed!; end
end
module T::Generic
  def [](*types); end
  def type_member(variance = nil, fixed: nil, lower: nil, upper: nil); end
  def type_parameters(*params); end
  def type_template(variance = nil, fixed: nil, lower: nil, upper: nil); end
  include T::Helpers
end
module T::Array
end
module T::Configuration
  def self.call_validation_error_handler(signature, opts); end
  def self.call_validation_error_handler=(value); end
  def self.default_checked_level=(default_checked_level); end
  def self.enable_checking_for_sigs_marked_checked_tests; end
  def self.enable_final_checks_on_hooks; end
  def self.enable_legacy_t_enum_migration_mode; end
  def self.hard_assert_handler(str, extra); end
  def self.hard_assert_handler=(value); end
  def self.inline_type_error_handler(error); end
  def self.inline_type_error_handler=(value); end
  def self.log_info_handler(str, extra); end
  def self.log_info_handler=(value); end
  def self.reset_final_checks_on_hooks; end
  def self.scalar_types; end
  def self.scalar_types=(values); end
  def self.sealed_violation_whitelist; end
  def self.sealed_violation_whitelist=(sealed_violation_whitelist); end
  def self.sig_builder_error_handler(error, location); end
  def self.sig_builder_error_handler=(value); end
  def self.sig_validation_error_handler(error, opts); end
  def self.sig_validation_error_handler=(value); end
  def self.soft_assert_handler(str, extra); end
  def self.soft_assert_handler=(value); end
end
module T::Enumerable
end
module T::Enumerator
  def self.[](type); end
end
module T::Hash
end
class T::Proc
  def bind(*_); end
  def params(*_param); end
  def returns(_type); end
  def void; end
end
module T::Range
end
module T::Set
end
